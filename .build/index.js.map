{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { log } from 'console'\nimport reader from 'readline-sync'\n\nimport Graph from './Graph.model'\nimport { writeTwoDementionalArray } from './helper';\n\nconst question = (question: string, validor: Function = () => true) => {\n  let repeat = true;\n  let invalid_input = false\n  let response = ''\n\n  while (repeat) {\n    repeat = false\n\n    const full_question = (invalid_input ? 'Invalid input, please ' : '') + question\n    const input = reader.question(full_question)\n\n    !validor(input) ? [repeat = true, invalid_input = true] : response = input\n\n  }\n\n  return response\n}\n\n\nconst graph = new Graph(\n  Number(\n    question('Graph is oriented (1 || 0)? \\n', (e: string) => {\n      return Number(e) === 1 || Number(e) === 0\n    })\n  ),\n  Number(\n    question('Enter quantity of apexes (n > 0)? \\n', (e: string) => Number(e) > 0)\n  )\n)\n\nconst graph_max_apex = graph.apexes.length\n// log(graph)\n\nlog('Now input edge\\'s apexes, to stop write \"end\" \\n')\n\nlet index = 1\nwhile (true) {\n  const input = question\n    (`New edge\\'s start from ~ to, example: (1 2),\n      n (${'1' + ' ~ ' + String(graph_max_apex)}) apex: ? \\n`,\n      (e: string) => {\n        if (e === 'end') {\n          return true\n        }\n        e.includes(' ') ? [] : false\n        const from = e.split(' ')[0]\n        const to = e.split(' ')[1]\n        return Number(from) > 0 && Number(from) <= graph_max_apex &&\n          Number(to) > 0 && Number(to) <= graph_max_apex\n\n      })\n\n  if (input === 'end') {\n    break\n  }\n\n  const from = Number(input.split(' ')[0])\n  const to = Number(input.split(' ')[1])\n\n  graph.createEdge(index, from, to)\n\n  index += 1\n\n}\n\nwriteTwoDementionalArray(graph.generateMatrixIncidents(), 'Matrix Incidents')\nlog('\\n')\nwriteTwoDementionalArray(graph.generateMatrixContiguity(), 'Matrix Contiguity')\n\ngraph.listInfoApexes().forEach(info => {\n  log(\n    `Apex - ${info.apex.index},\\n\n    degree - ${info.degree},\\n\n    input - ${info.input},\\n\n    exit - ${info.exit},\\n\n    isolated - ${info.degree === 0},\\n\n    hanging - ${info.degree === 1},\\n\n    `\n  )\n})\n\n\n// log(graph)"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,qBAAoB;AACpB,2BAAmB;AAEnB,mBAAkB;AAClB,oBAAyC;AAEzC,MAAM,WAAW,CAAC,WAAkB,UAAoB,MAAM,SAAS;AACrE,MAAI,SAAS;AACb,MAAI,gBAAgB;AACpB,MAAI,WAAW;AAEf,SAAO,QAAQ;AACb,aAAS;AAET,UAAM,gBAAiB,iBAAgB,2BAA2B,MAAM;AACxE,UAAM,QAAQ,6BAAO,SAAS;AAE9B,KAAC,QAAQ,SAAS,CAAC,SAAS,MAAM,gBAAgB,QAAQ,WAAW;AAAA;AAIvE,SAAO;AAAA;AAIT,MAAM,QAAQ,IAAI,qBAChB,OACE,SAAS,kCAAkC,CAAC,MAAc;AACxD,SAAO,OAAO,OAAO,KAAK,OAAO,OAAO;AAAA,KAG5C,OACE,SAAS,wCAAwC,CAAC,MAAc,OAAO,KAAK;AAIhF,MAAM,iBAAiB,MAAM,OAAO;AAGpC,wBAAI;AAAA;AAEJ,IAAI,QAAQ;AACZ,OAAO,MAAM;AACX,QAAM,QAAQ,SACX;AAAA,WACM,SAAc,OAAO;AAAA,GAC1B,CAAC,MAAc;AACb,QAAI,MAAM,OAAO;AACf,aAAO;AAAA;AAET,MAAE,SAAS,OAAO,KAAK;AACvB,UAAM,QAAO,EAAE,MAAM,KAAK;AAC1B,UAAM,MAAK,EAAE,MAAM,KAAK;AACxB,WAAO,OAAO,SAAQ,KAAK,OAAO,UAAS,kBACzC,OAAO,OAAM,KAAK,OAAO,QAAO;AAAA;AAIxC,MAAI,UAAU,OAAO;AACnB;AAAA;AAGF,QAAM,OAAO,OAAO,MAAM,MAAM,KAAK;AACrC,QAAM,KAAK,OAAO,MAAM,MAAM,KAAK;AAEnC,QAAM,WAAW,OAAO,MAAM;AAE9B,WAAS;AAAA;AAIX,4CAAyB,MAAM,2BAA2B;AAC1D,wBAAI;AACJ,4CAAyB,MAAM,4BAA4B;AAE3D,MAAM,iBAAiB,QAAQ,UAAQ;AACrC,0BACE,UAAU,KAAK,KAAK;AAAA;AAAA,eACT,KAAK;AAAA;AAAA,cACN,KAAK;AAAA;AAAA,aACN,KAAK;AAAA;AAAA,iBACD,KAAK,WAAW;AAAA;AAAA,gBACjB,KAAK,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
